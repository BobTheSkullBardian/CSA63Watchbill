# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178

# variables:
#   # DJANGO_CONFIG: "test"
#   MYSQL_DATABASE: $MYSQL_DB
#   MYSQL_ROOT_PASSWORD: $MYSQL_PASS
#   MYSQL_USER: $MYSQL_USER
#   MYSQL_PASSWORD: $MYSQL_PASS

# default:
#   image: ubuntu:20.04
#   #
#   # Pick zero or more services to be used on all builds.
#   # Only needed when using a docker container to run your tests in.
#   # Check out: https://docs.gitlab.com/ee/ci/services/index.html
#   services:
#     - mysql:8.0
#   #
#   # This folder is cached between builds
#   # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
#   cache:
#     paths:
#       - ~/.cache/pip/
#   before_script:
#     - apt -y update
#     - apt -y install apt-utils
#     - apt -y install net-tools python3.8 python3-pip mysql-client libmysqlclient-dev
#     - apt -y upgrade
#     - pip3 install -r requirements.txt


# migrations:
#   stage: build
#   script:
#     - python3 manage.py makemigrations
#     # - python3 manage.py makemigrations myapp
#     - python3 manage.py migrate
#     - python3 manage.py check


# django-tests:
#   stage: test
#   script:
#     # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
#     # - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
#     # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
#     - python3 manage.py test

# pages:
#   stage: deploy
#   script:
#     - python3 manage.py runserver &

stages:
  - build
  - test
  - release
  - deploy

build-job:
  tags:
    - vm-docker
  stage: build
  script:
    - pip3 install virtualenv
    - echo "creating virtual environment for the project..."
    - virtualenv $(pwd)/venv
    - source $(pwd)/venv/bin/activate
    - echo "Installing requirements..."
    - pip install -r requirements.txt
    - deactivate
  artifacts:
    paths:
      - $(pwd)/venv

test-job:
  tags:
    - vm-docker
  stage: test
  script:
    - echo "Activating virtual environment..."
    - source $(pwd)/venv/bin/activate
    - echo "Running unit tests..."
    - python manage.py test wbc
    - echo "Checking the server..."
    - python manage.py runserver &
    - sleep 10
    - curl -sSf http://localhost:8000 > /dev/null && echo "Server is Up"
    - pkill python
    - deactivate
    - echo "All tests successfully passed."

variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID

release-job:
  tags:
    - vm-docker
  stage: release
  before_script:
    - pip install docker
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE
  after_script:
    - docker logout

# Deploy petclinic
deploy-job:
  tags:
    - vm-docker
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY proxmox@192.168.0.137 "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker run -d -p 5000:8000 $CONTAINER_IMAGE"

